from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from db import *

ADMIN_ID = 6199518085  
TOKEN = "7571164900:AAH51WCNX73unu9jWhfNd425ISVPRYFw0EE"  

bot = Bot(token=TOKEN)
dp = Dispatcher()

class Form(StatesGroup):
    customer_name = State()
    customer_phone = State()
    customer_email = State()
    customer_status = State()
    deal_amount = State()
    deal_stage = State()
    customer_select = State()

def get_main_menu(role):
    if role == 'admin':
        return ReplyKeyboardMarkup(keyboard=[
            [KeyboardButton(text="–ú–∏–∑–æ“∑–æ–Ω"), KeyboardButton(text="–ú—É–æ–º–∏–ª–∞“≥–æ")],
            [KeyboardButton(text="–ò–ª–æ–≤–∞ –∫–∞—Ä–¥–∞–Ω–∏ –º–∏–∑–æ“∑"), KeyboardButton(text="–ò–ª–æ–≤–∞ –∫–∞—Ä–¥–∞–Ω–∏ –º—É–æ–º–∏–ª–∞")],
            [KeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")]
        ], resize_keyboard=True)
    else:
        return ReplyKeyboardMarkup(keyboard=[
            [KeyboardButton(text="–ú–∏–∑–æ“∑–æ–Ω"), KeyboardButton(text="–ú—É–æ–º–∏–ª–∞“≥–æ")]
        ], resize_keyboard=True)

@dp.message(Command("start"))
async def start(message: types.Message):
    user = get_user(message.from_user.id)
    
    if not user:
        role = 'admin' if message.from_user.id == ADMIN_ID else 'support'
        add_user(message.from_user.id, message.from_user.full_name, role)
        user = {'role': role}
    
    await message.answer(
        f"–°–∞–ª–æ–º {message.from_user.first_name}!\n–ù–∞“õ—à–∏ —à—É–º–æ: {user['role']}",
        reply_markup=get_main_menu(user['role'])
    )

@dp.message(F.text == "–ú–∏–∑–æ“∑–æ–Ω")
async def list_customers(message: types.Message):
    customers = get_customers()
    if not customers:
        await message.answer("“≤–æ–ª–æ –º–∏–∑–æ“∑–æ–Ω –Ω–µ—Å—Ç–∞–Ω–¥")
        return
    
    response = "üìã –ú–∏–∑–æ“∑–æ–Ω:\n\n"
    for customer in customers:
        response += (
            f"üë§ –ù–æ–º: {customer['name']}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {customer['phone']}\n"
            f"‚úâÔ∏è –ü–æ—á—Ç–∞: {customer['email']}\n"
            f"üîπ –í–∞–∑—ä–∏—è—Ç: {customer['status']}\n"
            f"üÜî ID: {customer['id']}\n\n"
        )
    await message.answer(response)

@dp.message(F.text == "–ò–ª–æ–≤–∞ –∫–∞—Ä–¥–∞–Ω–∏ –º–∏–∑–æ“∑")
async def add_customer_start(message: types.Message, state: FSMContext):
    await state.set_state(Form.customer_name)
    await message.answer("–ù–æ–º–∏ –º–∏–∑–æ“∑:", reply_markup=types.ReplyKeyboardRemove())

@dp.message(Form.customer_name)
async def process_customer_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Form.customer_phone)
    await message.answer("–†–∞“õ–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω:")

@dp.message(Form.customer_phone)
async def process_customer_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await state.set_state(Form.customer_email)
    await message.answer("–ü–æ—á—Ç–∞–∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω”£:")

@dp.message(Form.customer_email)
async def process_customer_email(message: types.Message, state: FSMContext):
    await state.update_data(email=message.text)
    await state.set_state(Form.customer_status)
    
    keyboard = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="–§–∞—ä–æ–ª"), KeyboardButton(text="“í–∞–π—Ä–∏—Ñ–∞—ä–æ–ª")],
        [KeyboardButton(text="–°–∞—Ä—á–∞—à–º–∞")]
    ], resize_keyboard=True)
    
    await message.answer("–í–∞–∑—ä–∏—è—Ç:", reply_markup=keyboard)

@dp.message(Form.customer_status)
async def process_customer_status(message: types.Message, state: FSMContext):
    status_map = {
        "–§–∞—ä–æ–ª": "active",
        "“í–∞–π—Ä–∏—Ñ–∞—ä–æ–ª": "inactive",
        "–°–∞—Ä—á–∞—à–º–∞": "lead"
    }
    
    status = status_map.get(message.text)
    if not status:
        await message.answer("–õ—É—Ç—Ñ–∞–Ω –∞–∑ —Ä”Ø–π—Ö–∞—Ç–∏ –¥–æ–¥–∞—à—É–¥–∞ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥!")
        return
    
    data = await state.get_data()
    customer_id = add_customer(data['name'], data['phone'], data['email'], status)
    
    await message.answer(
        f"‚úÖ –ú–∏–∑–æ“∑ –∏–ª–æ–≤–∞ —à—É–¥!\nID: {customer_id}",
        reply_markup=get_main_menu(get_user(message.from_user.id)['role'])
    )
    await state.clear()


@dp.message(F.text == "–ú—É–æ–º–∏–ª–∞“≥–æ")
async def list_deals(message: types.Message):
    user = get_user(message.from_user.id)
    deals = get_deals(user['id'] if user['role'] != 'admin' else None)
    
    if not deals:
        await message.answer("“≤–æ–ª–æ –º—É–æ–º–∏–ª–∞“≥–æ –Ω–µ—Å—Ç–∞–Ω–¥")
        return
    
    response = "üìã –ú—É–æ–º–∏–ª–∞“≥–æ:\n\n"
    for deal in deals:
        response += (
            f"üíº ID: {deal['id']}\n"
            f"üë§ –ú–∏–∑–æ“∑: {deal['customer_name']}\n"
            f"üí∞ –ú–∞–±–ª–∞“ì: ${deal['amount']:.2f}\n"
            f"üîπ –ú–∞—Ä“≥–∏–ª–∞: {deal['stage']}\n\n"
        )
    await message.answer(response)

@dp.message(F.text == "–ò–ª–æ–≤–∞ –∫–∞—Ä–¥–∞–Ω–∏ –º—É–æ–º–∏–ª–∞")
async def add_deal_start(message: types.Message, state: FSMContext):
    customers = get_customers()
    if not customers:
        await message.answer("–ê–≤–≤–∞–ª –º–∏–∑–æ“∑ –∏–ª–æ–≤–∞ –∫—É–Ω–µ–¥!")
        return
    
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=f"{c['id']} - {c['name']}")] for c in customers],
        resize_keyboard=True
    )
    
    await state.set_state(Form.customer_select)
    await message.answer("–ú–∏–∑–æ“∑—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:", reply_markup=keyboard)

@dp.message(Form.customer_select)
async def process_customer_select(message: types.Message, state: FSMContext):
    try:
        customer_id = int(message.text.split()[0])
    except (ValueError, IndexError):
        await message.answer("–õ—É—Ç—Ñ–∞–Ω –∏–Ω—Ç–∏—Ö–æ–±—Ä–æ –∞–∑ —Ä”Ø–π—Ö–∞—Ç –∫—É–Ω–µ–¥!")
        return
    
    await state.update_data(customer_id=customer_id)
    await state.set_state(Form.deal_amount)
    await message.answer("–ú–∞–±–ª–∞“ì–∏ –º—É–æ–º–∏–ª–∞:", reply_markup=types.ReplyKeyboardRemove())

@dp.message(Form.deal_amount)
async def process_deal_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
    except ValueError:
        await message.answer("–õ—É—Ç—Ñ–∞–Ω –º–∞–±–ª–∞“ì—Ä–æ –±–æ —Ä–∞“õ–∞–º –Ω–∞–≤–∏—Å–µ–¥ (–º–∏—Å–æ–ª: 1000 —ë 1000.50)")
        return
    
    await state.update_data(amount=amount)
    await state.set_state(Form.deal_stage)
    
    keyboard = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="–ø–µ—à–Ω–∏“≥–æ–¥"), KeyboardButton(text="–º—É–∑–æ–∫–∏—Ä–∞")],
        [KeyboardButton(text="–±–∞—Å—Ç–∞—à—É–¥–∞")]
    ], resize_keyboard=True)
    
    await message.answer("–ú–∞—Ä“≥–∏–ª–∞–∏ –º—É–æ–º–∏–ª–∞:", reply_markup=keyboard)

@dp.message(Form.deal_stage)
async def process_deal_stage(message: types.Message, state: FSMContext):
    stage_map = {
        "–ø–µ—à–Ω–∏“≥–æ–¥": "proposal",
        "–º—É–∑–æ–∫–∏—Ä–∞": "negotiation",
        "–±–∞—Å—Ç–∞—à—É–¥–∞": "closed"
    }
    
    stage = stage_map.get(message.text.lower())
    if not stage:
        await message.answer("–õ—É—Ç—Ñ–∞–Ω –º–∞—Ä“≥–∏–ª–∞–∏ –¥—É—Ä—É—Å—Ç—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥!")
        return
    
    data = await state.get_data()
    user = get_user(message.from_user.id)
    
    deal_id = add_deal(
        customer_id=data['customer_id'],
        user_id=user['id'],
        amount=data['amount'],
        stage=stage
    )
    
    await message.answer(
        f"‚úÖ –ú—É–æ–º–∏–ª–∞ –∏–ª–æ–≤–∞ —à—É–¥!\nID: {deal_id}",
        reply_markup=get_main_menu(user['role'])
    )
    await state.clear()

@dp.message(F.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: types.Message):
    user = get_user(message.from_user.id)
    if user['role'] != 'admin':
        await message.answer("–®—É–º–æ –∏“∑–æ–∑–∞—Ç –Ω–∞–¥–æ—Ä–µ–¥!")
        return
    
    stats = get_stats()
    
    status_translation = {
        "active": "–§–∞—ä–æ–ª",
        "inactive": "“í–∞–π—Ä–∏—Ñ–∞—ä–æ–ª",
        "lead": "–°–∞—Ä—á–∞—à–º–∞"
    }
    
    response = (
        "üìä –û–º–æ—Ä:\n\n"
        f"üë• “≤–∞–º–∞–≥”£ –º–∏–∑–æ“∑–æ–Ω: {stats['total_customers']}\n"
        "–í–∞–∑—ä–∏—è—Ç“≥–æ:\n"
    )
    
    for status, count in stats['status_stats']:
        response += f"  {status_translation.get(status, status)}: {count}\n"
    
    response += (
        f"\nüíº “≤–∞–º–∞–≥”£ –º—É–æ–º–∏–ª–∞“≥–æ: {stats['total_deals']}\n"
        f"üí∞ “≤–∞–º–∞–≥”£ –¥–∞—Ä–æ–º–∞–¥: ${stats['total_revenue']:.2f}"
    )
    
    await message.answer(response)

async def main():
    init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())